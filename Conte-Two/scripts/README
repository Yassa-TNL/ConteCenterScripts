1. bids_config.json - used to define which MRI scans corresponds to a given bids specification, so that standarized neuroimaging labels will be used once converted into nifti format.

2. bids_create.sh - used to convert the raw dicoms into nifiti format via the dcm2bids software package. Additional code was written to manually account for differences between the different scanning protocols (UCI/UCSD/P2).

3. bids_modify.py - supplimental code that was used to edit the metadata (json files), such that the dataset would meet the bids specifications for a valid standardized dataset. This step is also important so that fMRIprep will pull the correct meta data during fMRI preprocessing, such as slice timing and distortion correction.

4. data_aggrogate.R - takes the subject-level data and aggregates them into dataset of the entire sample, including all three imaging protocols (UCI/UCSD/P2). All of these datasets that are ready for analyzes can be found on the CHPC: /dfs9/yassalab/CONTE2/datasets

5. extract_freesurfer.sh - used to extract surface-level parcels from each of the subject's anatomical scans, comprising of brain volume, cortical thickness, and surface area.

6. extract_xcpfcon.sh - used to compute regional metrics from the fully preprocessed and desnosied resting-state scans, including regional homogenerity, amplitutude of low frequency fluxtutations, functional connectivity, and the timeseries of the bold signal for each parcel.

7. extract_xcpfeat.sh - used to extract volumetric parcels from each of the subject's task-evoked fMRI scans, specifically the 3D beta or contrast maps generated by fsl feat.

8. feat1.fsf - design template for level 1 of the bandit task, which had two conditions (win/loss), and a contrast map.

9. feat2.fsf - design template which is used to combine the multiple runs (n=4) from the bandit task into a single set of results that was subsequently used to extract neuroimaging metrics.

10. feat3.fsf - design template for level 1 of modeling the task performance on trail-by-trail basis. For these results only one beta map of the task performance was used, but processing was completed for six different models that contained variation in how they modeled task performance.

11. feat4.fsf - design template which is used to combine the multiple runs (n=4) from the prediction errors into a single set of results that was subsequently used to extract neuroimaging metrics.

12. feat_events.py - used to adjust the event files from the bandit task, such that they would be used to record the task conditions, onset time in seconds, and duration of a given event. 

13. sbatch_feat.sh - submitting analysis jobs of FSL feat and used design templates to automate submissions for the entire sample.

14. sbatch_proc.sh - submitting processing jobs for all neuroimaging preprocessing pipelines, including freesurfer, fmriprep, and xcpengine, additional preprocessing steps were taken to extract quality assurance metrics that reflect the level of motion/noise in a given scan, such as the Euler Number.